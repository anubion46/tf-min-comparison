sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
names()
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
sep_trajectory <- melt(sep_trajectory, id.vars = c("value", "step_size"))
print(sep_trajectory)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
# plt <- ggplot(sep_trajectory, aes(x)) +
#   geom_line(aes(y = value, color = "blue"), size = 1, alpha = 0.75) +
#   geom_line(aes(y = step_size, color = "red"), size = 1, alpha = 0.75) +
#   ggtitle(title) +
#   scale_x_continuous(name = 'X', limits = c(0, 100)) +
#   scale_y_continuous(name = 'Y') +
#   facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
# ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
source('D:/Worknfiles/PyCharm Projects/tf-min-comparison/output/plot.R')
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
names()
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
olnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "Val", "step_size"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output/test10")
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
names()
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
olnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "Val", "step_size"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
names()
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
olnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "Val", "step_size"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
olnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "Val", "step_size"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "Val", "step_size"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1, alpha = 0.75) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
#colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
#print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value), size = 1) +
geom_line(aes(y = step_size), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(values=c("grey", "blue")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
#print(sep_trajectory)
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "learning_rate", "decay"),
variable.vars = c("Val", "step_size"))
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value), size = 1) +
geom_line(aes(y = step_size), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(values=c("grey", "blue")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "learning_rate", "decay"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value), size = 1) +
geom_line(aes(y = step_size), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(values=c("grey", "blue")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "learning_rate", "decay"))
print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(values=c("grey", "blue")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "learning_rate", "decay"))
#print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(labels = c("Calculated value", "Step size"), values=c("red", "blue")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 9, height = 12, dpi = 72)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
library(ggplot2)
library(dplyr)
library(reshape2)
# Somehow change the limits to make graphic readable
trajectorySep <- function(name, trajectory, file){
sep_trajectory <-  trajectory[trajectory[,1] == name,]
sep_trajectory$method <- NULL
sep_trajectory$learning_rate <-  factor(sep_trajectory$learning_rate)
n <- length(levels(sep_trajectory$learning_rate))
# Add elseif for different methods to decrease 1 or stay the same
m <- length(levels(sep_trajectory$decay)) - 1
title <- capture.output(cat(toupper(name), 'PLOT'))
filename <- capture.output(cat(file, "_", name, ".jpeg", sep = ""))
sep_trajectory$x <- rep.int(1:(length(sep_trajectory$value)/(n*m)), n*m)
colnames(sep_trajectory)[which(colnames(sep_trajectory) == "value")] <- "Val"
sep_trajectory <- melt(sep_trajectory, id.vars = c("x", "learning_rate", "decay"))
#print(sep_trajectory)
plt <- ggplot(sep_trajectory, aes(x)) +
geom_line(aes(y = value, color = variable), size = 1) +
ggtitle(title) +
scale_x_continuous(name = 'X', limits = c(0, 100)) +
scale_y_continuous(name = 'Y') +
scale_colour_manual(name = "Legend", labels = c("Step size", "Calculated value"), values=c("blue", "red")) +
facet_grid(learning_rate ~ decay, scales = "free_y", labeller = label_both)
ggsave(filename = filename, plot = plt, device = "jpeg", width = 12, height = 12, dpi = 150)
}
trajectoryGraph <- function(file){
trajectory = read.csv(file)
for (method in levels(factor(trajectory$method)))
trajectorySep(method, trajectory, sub(".csv", "", file))
}
forEveryFile <- function(dir){
setwd(dir)
files <- list.files(pattern = "test_*")
lapply(files, trajectoryGraph)
setwd("../")
}
setwd("D:/Worknfiles/PyCharm Projects/tf-min-comparison/output")
dirs <-  list.files(pattern = "test10")
lapply(dirs, forEveryFile)
